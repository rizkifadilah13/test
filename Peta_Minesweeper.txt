Buatlah sebuah program untuk menghasilkan peta permainan Minesweeper
Contoh peta yang valid:

..1x1.....
111221....
x2.1x1....
x2.111....
11........
..........
..........
..........
..........
..........
Arti peta:

Simbol	Arti
x	ada bom di kotak tersebut
.	tidak ada bom di kotak tersebut maupun di sekelilingnya
angka	ada bom sejumlah angka di sekeliling kotak tersebut
Input yang diberikan adalah jumlah bom diikuti dengan masing-masing koordinat bom (baris, kolom)

Input Format

N           # baris pertama = jumlah bom  
baris,kolom # koordinat bom ke-1
...
baris,kolom # koordinat bom ke-N
Contoh input untuk peta diatas:

4
1,4
3,1
4,1
3,5
Constraints

Ukuran peta 10x10
Jumlah bom maksimal = 50
Output Format

Susunan karakter '.', 'x', dan angka dalam 10 baris dan 10 kolom

Sample Input 0

11
1,8
3,1
4,1
5,1
3,6
6,2
6,3
6,10
8,1
10,5
10,6
Sample Output 0

......1x1.
11..11211.
x2..1x1...
x3..111...
x421....11
2xx1....1x
2321....11
x1........
11.1221...
...1xx1...



import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'minesweeper' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER N
     *  2. STRING_ARRAY bom
     */

    public static List<String> minesweeper(int N, List<String> bom) {
    // Write your code here
	char[][] minesweeperMap = new char[10][10];

        // Inisialisasi peta dengan karakter '.'
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                minesweeperMap[i][j] = '.';
            }
        }

        // Menyematkan bom ke peta
        for (String bomb : bom) {
            String[] coordinates = bomb.split(",");
            int row = Integer.parseInt(coordinates[0]) - 1;
            int col = Integer.parseInt(coordinates[1]) - 1;
            minesweeperMap[row][col] = 'x';
        }

        // Mengisi angka di sekitar bom
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                if (minesweeperMap[i][j] == '.') {
                    int count = 0;

                    // Mengecek sekitar bom
                    for (int x = i - 1; x <= i + 1; x++) {
                        for (int y = j - 1; y <= j + 1; y++) {
                            if (x >= 0 && x < 10 && y >= 0 && y < 10 && minesweeperMap[x][y] == 'x') {
                                count++;
                            }
                        }
                    }

                    // Menyimpan hasil count di peta
                    if (count > 0) {
                        minesweeperMap[i][j] = (char) (count + '0');
                    }
                }
            }
        }

        // Mengonversi peta menjadi List<String>
        List<String> result = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            result.add(new String(minesweeperMap[i]));
        }

        return result;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int N = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> bom = IntStream.range(0, N).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<String> result = Result.minesweeper(N, bom);

        bufferedWriter.write(
            result.stream()
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
